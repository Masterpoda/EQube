
Neo_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aab  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079d  00000000  00000000  00000dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000382  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000018e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dd  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020e  00000000  00000000  00001d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001f27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  78:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ledsetup>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	24 9a       	sbi	0x04, 4	; 4
  82:	08 95       	ret

00000084 <showColor>:
}


void showColor( unsigned char r , unsigned char g , unsigned char b ) {
	
	cli();
  84:	f8 94       	cli
  86:	e8 e1       	ldi	r30, 0x18	; 24
  88:	f0 e0       	ldi	r31, 0x00	; 0
	//_delay_ms(1);
	_delay_us( (RES / 1000UL) + 1);				// Round up since the delay must be _at_least_ this long (too short might not work, too long not a problem)
}


void showColor( unsigned char r , unsigned char g , unsigned char b ) {
  8a:	38 e0       	ldi	r19, 0x08	; 8
  8c:	8d c0       	rjmp	.+282    	; 0x1a8 <showColor+0x124>

};

inline void sendBit( int bitVal )
{
	if(bitVal)
  8e:	22 23       	and	r18, r18
  90:	b4 f4       	brge	.+44     	; 0xbe <showColor+0x3a>
	{
		asm volatile(
  92:	2c 9a       	sbi	0x05, 4	; 5
	...
  ac:	2c 98       	cbi	0x05, 4	; 5
	...
  ba:	00 00       	nop
  bc:	12 c0       	rjmp	.+36     	; 0xe2 <showColor+0x5e>
		
		);
	}
	else
	{
		asm volatile (
  be:	2c 9a       	sbi	0x05, 4	; 5
	...
  c8:	2c 98       	cbi	0x05, 4	; 5
	...
inline void sendByte( unsigned char byte ) {
	
	for( unsigned char bit = 0 ; bit < 8 ; bit++ ) {
		
		sendBit( byte & 0b10000000);	// Neopixel wants bit in highest-to-lowest order
		byte <<= 1;	 					// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
  e2:	22 0f       	add	r18, r18
  e4:	91 50       	subi	r25, 0x01	; 1

}

inline void sendByte( unsigned char byte ) {
	
	for( unsigned char bit = 0 ; bit < 8 ; bit++ ) {
  e6:	99 f6       	brne	.-90     	; 0x8e <showColor+0xa>
  e8:	28 2f       	mov	r18, r24
  ea:	93 2f       	mov	r25, r19

};

inline void sendBit( int bitVal )
{
	if(bitVal)
  ec:	22 23       	and	r18, r18
  ee:	b4 f4       	brge	.+44     	; 0x11c <showColor+0x98>
	{
		asm volatile(
  f0:	2c 9a       	sbi	0x05, 4	; 5
	...
 10a:	2c 98       	cbi	0x05, 4	; 5
	...
 118:	00 00       	nop
 11a:	12 c0       	rjmp	.+36     	; 0x140 <showColor+0xbc>
		
		);
	}
	else
	{
		asm volatile (
 11c:	2c 9a       	sbi	0x05, 4	; 5
	...
 126:	2c 98       	cbi	0x05, 4	; 5
	...
inline void sendByte( unsigned char byte ) {
	
	for( unsigned char bit = 0 ; bit < 8 ; bit++ ) {
		
		sendBit( byte & 0b10000000);	// Neopixel wants bit in highest-to-lowest order
		byte <<= 1;	 					// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
 140:	22 0f       	add	r18, r18
 142:	91 50       	subi	r25, 0x01	; 1

}

inline void sendByte( unsigned char byte ) {
	
	for( unsigned char bit = 0 ; bit < 8 ; bit++ ) {
 144:	99 f6       	brne	.-90     	; 0xec <showColor+0x68>
 146:	24 2f       	mov	r18, r20
 148:	93 2f       	mov	r25, r19

};

inline void sendBit( int bitVal )
{
	if(bitVal)
 14a:	22 23       	and	r18, r18
 14c:	b4 f4       	brge	.+44     	; 0x17a <showColor+0xf6>
	{
		asm volatile(
 14e:	2c 9a       	sbi	0x05, 4	; 5
	...
 168:	2c 98       	cbi	0x05, 4	; 5
	...
 176:	00 00       	nop
 178:	12 c0       	rjmp	.+36     	; 0x19e <showColor+0x11a>
		
		);
	}
	else
	{
		asm volatile (
 17a:	2c 9a       	sbi	0x05, 4	; 5
	...
 184:	2c 98       	cbi	0x05, 4	; 5
	...
inline void sendByte( unsigned char byte ) {
	
	for( unsigned char bit = 0 ; bit < 8 ; bit++ ) {
		
		sendBit( byte & 0b10000000);	// Neopixel wants bit in highest-to-lowest order
		byte <<= 1;	 					// so send highest bit (bit #7 in an 8-bit byte since they start at 0)
 19e:	22 0f       	add	r18, r18
 1a0:	91 50       	subi	r25, 0x01	; 1

}

inline void sendByte( unsigned char byte ) {
	
	for( unsigned char bit = 0 ; bit < 8 ; bit++ ) {
 1a2:	99 f6       	brne	.-90     	; 0x14a <showColor+0xc6>
 1a4:	31 97       	sbiw	r30, 0x01	; 1


void showColor( unsigned char r , unsigned char g , unsigned char b ) {
	
	cli();
	for( int p=0; p<PIXELS; p++ ) {
 1a6:	19 f0       	breq	.+6      	; 0x1ae <showColor+0x12a>
	//_delay_ms(1);
	_delay_us( (RES / 1000UL) + 1);				// Round up since the delay must be _at_least_ this long (too short might not work, too long not a problem)
}


void showColor( unsigned char r , unsigned char g , unsigned char b ) {
 1a8:	26 2f       	mov	r18, r22
 1aa:	93 2f       	mov	r25, r19
 1ac:	70 cf       	rjmp	.-288    	; 0x8e <showColor+0xa>
	
	cli();
	for( int p=0; p<PIXELS; p++ ) {
		sendPixel( r , g , b );
	}
	sei();
 1ae:	78 94       	sei
 1b0:	80 e3       	ldi	r24, 0x30	; 48
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <showColor+0x12e>
 1b6:	08 95       	ret

000001b8 <main>:
#include "NeoPixel.h"
#include "FFT.h"

int main()
{
	ledsetup();
 1b8:	0e 94 40 00 	call	0x80	; 0x80 <ledsetup>
	// use SBI/CBI
	unsigned char r = 0, g = 0, b = 0;
	while (1)
	{
		r = 0; g = 0; b = 0;
		for(r = 0; r < 255; r++)
 1bc:	c0 e0       	ldi	r28, 0x00	; 0
 1be:	dc 2f       	mov	r29, r28
		{
			showColor(r,g,b);
 1c0:	4c 2f       	mov	r20, r28
 1c2:	6c 2f       	mov	r22, r28
 1c4:	8d 2f       	mov	r24, r29
 1c6:	0e 94 42 00 	call	0x84	; 0x84 <showColor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	8f e9       	ldi	r24, 0x9F	; 159
 1cc:	9f e0       	ldi	r25, 0x0F	; 15
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x16>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x1c>
 1d4:	00 00       	nop
	// use SBI/CBI
	unsigned char r = 0, g = 0, b = 0;
	while (1)
	{
		r = 0; g = 0; b = 0;
		for(r = 0; r < 255; r++)
 1d6:	df 5f       	subi	r29, 0xFF	; 255
 1d8:	df 3f       	cpi	r29, 0xFF	; 255
 1da:	91 f7       	brne	.-28     	; 0x1c0 <main+0x8>
 1dc:	dc 2f       	mov	r29, r28
			_delay_ms(1);
		}
		r = 0; g = 0; b = 0;
		for(g = 0; g < 255; g++)
		{
			showColor(r,g,b);
 1de:	4c 2f       	mov	r20, r28
 1e0:	6d 2f       	mov	r22, r29
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 42 00 	call	0x84	; 0x84 <showColor>
 1e8:	8f e9       	ldi	r24, 0x9F	; 159
 1ea:	9f e0       	ldi	r25, 0x0F	; 15
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x34>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x3a>
 1f2:	00 00       	nop
		{
			showColor(r,g,b);
			_delay_ms(1);
		}
		r = 0; g = 0; b = 0;
		for(g = 0; g < 255; g++)
 1f4:	df 5f       	subi	r29, 0xFF	; 255
 1f6:	df 3f       	cpi	r29, 0xFF	; 255
 1f8:	91 f7       	brne	.-28     	; 0x1de <main+0x26>
 1fa:	dc 2f       	mov	r29, r28
			_delay_ms(1);
		}
		r = 0; g = 0; b = 0;
		for(b = 0; b < 255; b++)
		{
			showColor(r,g,b);
 1fc:	4d 2f       	mov	r20, r29
 1fe:	6c 2f       	mov	r22, r28
 200:	8c 2f       	mov	r24, r28
 202:	0e 94 42 00 	call	0x84	; 0x84 <showColor>
 206:	8f e9       	ldi	r24, 0x9F	; 159
 208:	9f e0       	ldi	r25, 0x0F	; 15
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <main+0x52>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x58>
 210:	00 00       	nop
		{
			showColor(r,g,b);
			_delay_ms(1);
		}
		r = 0; g = 0; b = 0;
		for(b = 0; b < 255; b++)
 212:	df 5f       	subi	r29, 0xFF	; 255
 214:	df 3f       	cpi	r29, 0xFF	; 255
 216:	91 f7       	brne	.-28     	; 0x1fc <main+0x44>
 218:	d2 cf       	rjmp	.-92     	; 0x1be <main+0x6>

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
